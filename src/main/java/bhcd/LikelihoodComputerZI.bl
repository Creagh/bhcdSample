package bhcd

import bhcd.GraphAdjMatrix.MutableGraphAdjMatrix

/*
 * Compute the marginalized likelihood for the Zero-Inflated Model
 * 
 * p(G | D, alpha, beta, theta)
 */

model LikelihoodComputerZI {
	
	param BasicDendrogram dend // parameter
	param RealVar alpha // hyperparameter
	param RealVar beta // hyperparamter
	param RealVar theta // hyperparameter - mixture parameter
	random GraphAdjMatrix graph // data
	
  
	laws {
		
	
  	logf(dend, alpha, beta, theta, graph) {
  		
  		if (alpha <= 0.0 || beta <= 0.0 || theta < 0 || theta >= 1) return NEGATIVE_INFINITY
  		
  	  // iterate over all internal nodes
  	  // calculate logProbability for each internal node
  	  // add to current sum
  		
  		var sum = 0.0;
  		
  		// get all internal tree nodes in dend
  		// Note: there are n-1 internal nodes for n vertices
  		val internalNodes = dend.getInternalNodes();
  		
  		for(BasicTreeNode r: internalNodes) {
  			
  			val Lr = dend.countLRleaves(r, true); // number of leaves in left subtree rooted at r
  			val Rr = dend.countLRleaves(r, false); // number of leaves in right subtree rooted at r
  			
  			/**
  			 * Calculate E_r, the number of edges in graph whose endpoints have r as their LCA in dend
  			 */ 
  			
  			// extract the vertex IDs of the leaf nodes from the left and right subtrees rooted at r
  			val left = dend.getLRSubtree(r, true);
  			val right = dend.getLRSubtree(r, false);
  			
  			// by default, r must be the LCA between the leaf nodes in the sets 'left' and 'right'
  			
  			// count the number of edges in the graph between the left and right sets of vertices
  			val Er = graph.countEdgesBetween(left, right);
  			
  			
  			/**
  			 * Compute the marginalized likelihood p(G | D, alpha, beta, theta)
  			 * 
  			 */
  			 
  			// First, compute the component due to the Beta Mixture (log-scale)
  			val betaPart = log(1 - theta) + ( lnGamma(alpha + beta) - lnGamma(alpha) - lnGamma(beta) ) +
  					   ( lnGamma(Er + alpha) + lnGamma( (Lr * Rr) + beta - Er) - lnGamma( (Lr * Rr) + alpha + beta) );
  					   
  			if(theta == 0) { // use the base model (without zero-inflation)
  				sum += betaPart;
  				
  			} else { // use the ZI model
  			// Note: we want to avoid log(theta) when theta = 0
  			
  				if(Er == 0) { // when E_r = 0 add both mixture components using the LogSumExp trick
  					sum += bayonet.math.NumericalUtils.logAdd(log(theta), betaPart);
  				
  				} else { // when E_r > 0 add the component due to the Beta mixture
  					sum += betaPart;	
  				}
  			}


  		}
      
        //System.out.println("log density = " + sum);
  		return(sum);
  	}
	
	}
	
	generate (rand) {
	  	(graph as MutableGraphAdjMatrix).sampleGraph(rand, alpha, beta, theta, dend);
	}
	
}